/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * I2C-Generator: 0.2.0
 * Yaml Version: 0.1.0
 * Template Version: 0.7.0-38-g217adaf
 */
/*
 * Copyright (c) 2021, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "SensirionI2CSdp.h"
#include "Arduino.h"
#include "SensirionCore.h"
#include <Wire.h>

SensirionI2CSdp::SensirionI2CSdp() {
}

void SensirionI2CSdp::begin(TwoWire& i2cBus, uint8_t i2cAddress) {
    _i2cBus = &i2cBus;
    _i2cAddress = i2cAddress;
}

uint16_t
SensirionI2CSdp::startContinuousMeasurementWithMassFlowTCompAndAveraging() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x3603);
    if (error) {
        return error;
    }

    error =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    delay(10);
    return error;
}

uint16_t SensirionI2CSdp::startContinuousMeasurementWithMassFlowTComp() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x3608);
    if (error) {
        return error;
    }

    error =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    delay(10);
    return error;
}

uint16_t
SensirionI2CSdp::startContinuousMeasurementWithDiffPressureTCompAndAveraging() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x3615);
    if (error) {
        return error;
    }

    error =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    delay(10);
    return error;
}

uint16_t SensirionI2CSdp::startContinuousMeasurementWithDiffPressureTComp() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x361E);
    if (error) {
        return error;
    }

    error =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    delay(10);
    return error;
}

uint16_t SensirionI2CSdp::stopContinuousMeasurement() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x3FF9);
    if (error) {
        return error;
    }

    error =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    delay(1);
    return error;
}

uint16_t SensirionI2CSdp::triggerMeasurementWithMassFlowTCompAndAveraging() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x3624);
    if (error) {
        return error;
    }

    error =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    delay(45);
    return error;
}

uint16_t SensirionI2CSdp::triggerMeasurementWithDiffPressureTComp() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x362F);
    if (error) {
        return error;
    }

    error =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    delay(45);
    return error;
}

uint16_t SensirionI2CSdp::readMeasurementRaw(int16_t& differentialPressureRaw,
                                             int16_t& temperatureRaw,
                                             int16_t& scalingFactor) {
    uint16_t error;
    uint8_t buffer[9];

    delay(1);

    SensirionI2CRxFrame rxFrame(buffer, 9);
    error = SensirionI2CCommunication::receiveFrame(_i2cAddress, 9, rxFrame,
                                                    *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getInt16(differentialPressureRaw);
    error |= rxFrame.getInt16(temperatureRaw);
    error |= rxFrame.getInt16(scalingFactor);
    return error;
}

uint16_t SensirionI2CSdp::readMeasurement(float& differentialPressure,
                                          float& temperature) {
    int16_t error;
    int16_t differentialPressureRaw;
    int16_t temperatureRaw;
    int16_t scalingFactor;

    error = readMeasurementRaw(differentialPressureRaw, temperatureRaw,
                               scalingFactor);
    if (error) {
        return error;
    }

    differentialPressure = (float)differentialPressureRaw / scalingFactor;
    temperature = convert_temperature_raw_to_celsius(temperatureRaw);
    return NoError;
}

float SensirionI2CSdp::convert_temperature_raw_to_celsius(
    int16_t temperature_raw) {
    return (float)temperature_raw / 200.0;
}

uint16_t SensirionI2CSdp::enterSleepMode() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x3677);
    if (error) {
        return error;
    }

    return SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
}

uint16_t SensirionI2CSdp::exitSleepMode() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x00);
    if (error) {
        return error;
    }

    error =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    delay(2);
    return error;
}

uint16_t SensirionI2CSdp::prepareProductIdentifier() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x367C);
    if (error) {
        return error;
    }

    return SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
}

uint16_t SensirionI2CSdp::readProductIdentifier(uint32_t& productNumber,
                                                uint8_t serialNumber[],
                                                uint8_t serialNumberSize) {
    uint16_t error;
    uint8_t buffer[18];
    SensirionI2CTxFrame txFrame(buffer, 18);

    error = txFrame.addCommand(0xE102);
    if (error) {
        return error;
    }

    error =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (error) {
        return error;
    }

    delay(1);

    SensirionI2CRxFrame rxFrame(buffer, 18);
    error = SensirionI2CCommunication::receiveFrame(_i2cAddress, 18, rxFrame,
                                                    *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getUInt32(productNumber);
    error |= rxFrame.getBytes(serialNumber, serialNumberSize);
    return error;
}